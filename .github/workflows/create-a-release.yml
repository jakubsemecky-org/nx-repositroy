name: Create a Release

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      confirm:
        description: 'Confirm Release (Dry Run by default)'
        type: boolean
        required: false
        default: false
      release_name:
        description: 'Release branch name (eg: sprint-10)'
        type: string
        required: true
        default: 'sprint-x'
      transcreation-api-version:
        description: 'Override Transcreation API version'
        type: string
        required: false
        default: ''
      tracking-api-version:
        description: 'Override Tracking API version'
        type: string
        required: false
        default: ''
      manage-api-version:
        description: 'Override Manage API version'
        type: string
        required: false
        default: ''
      manage-ui-version:
        description: 'Override Manage UI version'
        type: string
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for AWS access
      contents: write # Required for creating branches, commits, and tags
      pull-requests: write # Required for creating pull requests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for accurate changelog generation and nx release

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies and dump versions
        run: |
          npm ci
          npx nx report

      - name: Determine date and branch names
        id: variables
        run: |
          echo "feature_branch=feature/release-${{ github.event.inputs.confirm }}" >> $GITHUB_OUTPUT
          echo "release_branch=release/${{ github.event.inputs.confirm }}" >> $GITHUB_OUTPUT

      # Create temporary feature branch from main, that will be used to raise versions
      - name: Create feature branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout main
          git pull origin main
          git checkout -b ${{ steps.variables.outputs.feature_branch }}
      
      # Validate that we have release versions
      - name: Validate NX Release
        id: validate_nx_release
        run: |
          npx nx release version --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create versions and Git Tags
      - name: Run NX Release
        if: steps.validate_nx_release.outcome == 'success' && github.event.inputs.confirm == 'true'
        id: nx_release
        run: |
          npx nx release --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create release branch and push changes to GitHub
      - name: Create release branch
        if: steps.nx_release.outcome == 'success' && github.event.inputs.confirm == 'true'
        run: |
          git checkout ${{ steps.variables.outputs.feature_branch }}
          git push origin ${{ steps.variables.outputs.feature_branch }} --tags
          git checkout -b ${{ steps.variables.outputs.release_branch }}
          git push origin ${{ steps.variables.outputs.release_branch }} --tags
      # Create a Pull Request from temporary feature branch, back to main
      - name: Create Pull Request
        if: steps.nx_release.outcome == 'success' && github.event.inputs.confirm == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const github = require('@actions/github');
            const core = require('@actions/core');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const base = 'main';
            const head = '${{ steps.variables.outputs.feature_branch }}';
            const title = `Release: ${{ github.event.inputs.confirm }}`;
            const body = `Automated release pull request for version updates.`;
            const reviewers = ['jakubsemecky-vml'];
            try {
              // Create Pull Request
              const { data: pullRequest } = await github.rest.pulls.create({
                owner,
                repo,
                title,
                head,
                base,
                body,
              });
              core.info(`Pull request created: ${pullRequest.html_url}`);
              // Request reviewers
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number: pullRequest.number,
                reviewers: reviewers
              });
              core.info(`Reviewers requested: ${reviewers.join(', ')}`);
            } catch (error) {
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry Run Message
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "Release not confirmed, running dry run mode!"
          echo "No commits, tags, or pull requests were created."
